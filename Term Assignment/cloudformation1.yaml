AWSTemplateFormatVersion: '2010-09-09'
Resources:
  IncidentReportsBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: b00934899-incident-reports-cf-final
      WebsiteConfiguration:
        IndexDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false


  IncidentReportsBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref IncidentReportsBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action:
              - 's3:GetObject'
            Resource:
              - !Sub 'arn:aws:s3:::${IncidentReportsBucket}/*'

  processIncidentCf:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'processIncidentCf'
      Handler: 'test-lambda.lambda_handler'
      Role: 'arn:aws:iam::196551330648:role/LabRole'
      Code:
        S3Bucket: "b00934899-lambda-cloud-formation-cf"
        S3Key: "test-lambda.py.zip"
      Runtime: 'python3.8'

  readFromQueueCf:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'readFromQueueCf'
      Handler: 'read-from-queue.lambda_handler'
      Role: 'arn:aws:iam::196551330648:role/LabRole'
      Code:
        S3Bucket: "b00934899-lambda-cloud-formation-cf"
        S3Key: "read-from-queue.py.zip"
      Runtime: 'python3.8'
      Timeout: 10

  triggerHurricaneCf:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'triggerHurricaneCf'
      Handler: 'triggerHurricane.lambda_handler'
      Role: 'arn:aws:iam::196551330648:role/LabRole'
      Code:
        S3Bucket: "b00934899-lambda-cloud-formation-cf"
        S3Key: "triggerHurricane.py.zip"
      Runtime: 'python3.8'
      Timeout: 5

  triggerOilSpillCf:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'triggerOilSpillCf'
      Handler: 'triggerOilSpill.lambda_handler'
      Role: 'arn:aws:iam::196551330648:role/LabRole'
      Code:
        S3Bucket: "b00934899-lambda-cloud-formation-cf"
        S3Key: "triggerOilSpill.py.zip"
      Runtime: 'python3.8'
      Timeout: 5

  triggerManOverboardCf:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'triggerManOverboardCf'
      Handler: 'triggerManOverboard.lambda_handler'
      Role: 'arn:aws:iam::196551330648:role/LabRole'
      Code:
        S3Bucket: "b00934899-lambda-cloud-formation-cf"
        S3Key: "triggerManOverboard.py.zip"
      Runtime: 'python3.8'
      Timeout: 5

  MySQSQueueStandard:
    Type: 'AWS::SQS::Queue'
    Properties:
      QueueName: IncidentReportCf

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: testAPI

  LambdaTestPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref processIncidentCf
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*"

  IncidentResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: "incident"

  IncidentOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref IncidentResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              "method.response.header.Access-Control-Allow-Methods": "'GET,POST,PUT,DELETE'"
              "method.response.header.Access-Control-Allow-Origin": "'*'"
            ResponseTemplates:
              "application/json": ""
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          "application/json": '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": true
            "method.response.header.Access-Control-Allow-Methods": true
            "method.response.header.Access-Control-Allow-Origin": true
          ResponseModels:
            "application/json": "Empty"

  IncidentMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref IncidentResource
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${processIncidentCf.Arn}/invocations"
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: $input.json('$')
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: $input.json('$')
      RequestParameters:
        method.request.querystring.name: false
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: "200"

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - IncidentMethod
    Properties:
      RestApiId: !Ref ApiGateway

  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref ApiGateway
      DeploymentId: !Ref ApiDeployment
      StageName: production
      Description: Production Stage

  StepFunctionStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: TriggerLambdaBasedOnIncidentType
      DefinitionString:
        Fn::Sub:
          - |
            {
              "Comment": "Step Function for Triggering Lambda Based on Incident Type",
              "StartAt": "ProcessQueueEvent",
              "States": {
                "ProcessQueueEvent": {
                  "Type": "Task",
                  "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:readFromQueueCf",
                  "ResultPath": "$.detail.result",
                  "Next": "ProcessIncidentEvent"
                },
                "ProcessIncidentEvent": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.detail.result.type",
                      "StringEquals": "Hurricane",
                      "Next": "triggerHurricane"
                    },
                    {
                      "Variable": "$.detail.result.type",
                      "StringEquals": "Oil Spill",
                      "Next": "triggerOilSpill"
                    },
                    {
                      "Variable": "$.detail.result.type",
                      "StringEquals": "Man Overboard",
                      "Next": "triggerManOverboard"
                    }
                  ],
                  "Default": "ProcessQueueEvent"
                },
                "triggerHurricane": {
                  "Type": "Task",
                  "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:triggerHurricaneCf",
                  "InputPath": "$.detail.result",
                  "End": true
                },
                "triggerOilSpill": {
                  "Type": "Task",
                  "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:triggerOilSpillCf",
                  "InputPath": "$.detail.result",
                  "End": true
                },
                "triggerManOverboard": {
                  "Type": "Task",
                  "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:triggerManOverboardCf",
                  "InputPath": "$.detail.result",
                  "End": true
                }
              }
            }
          - {}
      RoleArn: 'arn:aws:iam::196551330648:role/LabRole'

  HurricaneAlertCfTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "Hurricane Alert SNS Topic"
      TopicName: "HurricaneAlertCfTopic"

  ManOverboardAlertCfTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "Man Overboard Alert SNS Topic"
      TopicName: "ManOverboardAlertCfTopic"

  OilSpillCfAlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "Oil Spill Alert SNS Topic"
      TopicName: "OilSpillCfAlertTopic"

  HurricaneAlertCfTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref HurricaneAlertCfTopic
      Endpoint: "limysh310@gmail.com"

  # Subscription for ManOverboardAlertCfTopic
  ManOverboardAlertCfTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref ManOverboardAlertCfTopic
      Endpoint: "limysh310@gmail.com"

  # Subscription for OilSpillCfAlertTopic
  OilSpillCfAlertTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref OilSpillCfAlertTopic
      Endpoint: "limysh310@gmail.com"

  StateMachineTriggerRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Rule to trigger Step Function every one minute"
      ScheduleExpression: "rate(1 minute)"
      State: "DISABLED"
      Targets:
        -
          Arn:
            Fn::GetAtt:
              - "StepFunctionStateMachine"
              - "Arn"
          Id: "TriggerStepFunction"
          RoleArn: 'arn:aws:iam::196551330648:role/LabRole'



Outputs:
  APIGatewayURL:
    Description: "API Gateway URL"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/production"

  HurricaneAlertTopicARN:
    Description: "ARN of Hurricane Alert SNS Topic"
    Value: !Ref HurricaneAlertCfTopic

  ManOverboardAlertTopicARN:
    Description: "ARN of Man Overboard Alert SNS Topic"
    Value: !Ref ManOverboardAlertCfTopic

  OilSpillAlertTopicARN:
    Description: "ARN of Oil Spill Alert SNS Topic"
    Value: !Ref OilSpillCfAlertTopic
